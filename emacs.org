* .emacs
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (add-hook 'org-mode-hook 'org-indent-mode)

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-archives
     (quote
      (("gnu" . "http://elpa.gnu.org/packages/")
       ("melpa" . "https://melpa.org/packages/")
       ("melpa-stable" . "https://stable.melpa.org/packages/")
       ("org" . "https://orgmode.org/elpa/")))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
;;trim whitespace and ensure newline at eof
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq require-final-newline t)
(setq indo-enable-flex-matching t)
(setq ido-everywere t)
(ido-mode 1)
#+END_SRC

* Auto
autopair or closing parenthesis insertion
#+BEGIN_SRC emacs-lisp
(use-package autopair
:ensure t)
(autopair-global-mode)
(show-paren-mode 1)

#+END_SRC
* themes
#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
:ensure t)
(load-theme 'monokai t)
#+END_SRC
* Company...
(an autocomplete package)
#+BEGIN_SRC emacs-lisp
(use-package company
:ensure t
:config
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 2)
(with-eval-after-load 'company
(define-key company-active-map (kbd "M-n") nil)
(define-key company-active-map (kbd "M-p") nil)
(define-key company-active-map (kbd "C-n") #'company-select-next)
(define-key company-active-map (kbd "C-p") #'company-select-previous))
(global-company-mode t))
#+END_SRC
* which key
#+BEGIN_SRC emacs-lisp
 (use-package which-key
   :ensure t
   :config (which-key-mode))
#+END_SRC
* Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package org-ac
    :ensure t
    :init (progn
            (require 'org-ac
                     (org-ac/config-default)
                     )))

#+END_SRC
* ace window, swiper, listbuffers, counsel, avy
#+BEGIN_SRC emacs-lisp
  (setq indo-enable-flex-matching t)
  (setq ido-everywere t)
  (ido-mode 1)

  (defalias 'list-buffers 'ibuffer)

  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
  (use-package counsel
    :ensure t
    )
  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
* reveal.js
 #+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
:ensure t)

 #+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
   (use-package jedi
     :ensure t
     :init
     (add-hook 'python-mode-hook 'jedi:setup)
     (add-hook 'python-mode-hook 'jedi:ac-setup))
   (use-package elpy
   :ensure t
   :config
   (elpy-enable))

   (use-package py-autopep8
   :ensure t
   :init
   (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

   (defvar myPackages
     '(better-defaults
     elpy
     Flycheck
     material-theme
     py-autopep8))


   (use-package flymake-python-pyflakes
     :ensure t
     :init
     (add-hook 'python-mode-hook 'flymake-python-pyflakes-load))
#+END_SRC
* C
#+BEGIN_SRC emacs-lisp
;; Run C programs directly from within emacs
(defun execute-c-program ()
  (interactive)
  (defvar foo)
(setq foo (concat "gcc " (buffer-name) " && ./a.out"))
(shell-command foo))

(global-set-key (kbd "C-c C-g") 'execute-c-program)

#+END_SRC
* YASnippet
#+BEGIN_SRC emacs-lisp
   (use-package yasnippet-snippets
   :ensure t
   :init
   (yas-global-mode 1))
#+END_SRC
* Undo Tree
 #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :ensure t
     :init
     (global-undo-tree-mode))
 #+END_SRC
* Yank-Pop
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))
#+END_SRC
* Web Mode
 #+BEGIN_SRC emacs-lisp
   (use-package web-mode
     :ensure t
     :config
     (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
     (setq web-mode-engines-alist
           '(("django" . "\\.html\\'")))
     (setq web-mode-ac-sources-alist
           '(("css" . (ac-source-css-property))
             ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
     (setq web-mode-enable-auto-closing t))
 #+END_SRC
* PHP
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t)
#+END_SRC

* NeoTree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :bind ([f8] . neotree-toggle)
  :config (setq neo-default-system-application "open"))
#+END_SRC
* Multiple-Cursors
depends on cl-lib package
#+BEGIN_SRC
(use-package cl-lib
:ensure t)

(use-package multiple-cursors
:ensure t)
:config
(global-set-key (kbd "C-c m c") 'mc/edit-lines)
(global-set-key (kbd "C-c m n") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c m p") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c m a") 'mc/mark-all-like-this)
#+END_SRC
* w3m
 #+BEGIN_SRC emacs-lisp
    (add-to-list 'exec-path "/etc/w3m")
 #+END_SRC
